(load "load")

;;;; A demonstration of Cayley groups using the graph library.

;;; The vertices of a Cayley graph are the group elements, and a
;;; directed edge exists between group elements (g, gs), where
;;; s is a generator.

;;; A Cayley graph can be infinite or finite, depending on whether
;;; the underlying group is infinite or finite.

(define-memoized (cayley element generators group-*)
  (let ((vertex (make-vertex (stream) element)))
    (set-vertex-edges!
      vertex
      (make-edges
       (stream-map
        (lambda (s)
	  (make-edge vertex
		     (cayley (group-* element s) generators group-*)))
	(list->stream generators))))
    vertex))

;;; Cyclic groups

(define (cyclic-cayley n g)
  (define (cyclic-* a b)
    (modulo (+ a b) n))
  (cayley 0 (cons g '()) cyclic-*))

;;; The cyclic group of order 5, generated by the group
;;; element 2.  (Since 2 and 5 are relatively prime, 2
;;; alone generates the cyclic group of order 5.)

(define C5-cayley (cyclic-cayley 5 2))

(count-graph-vertices C5-cayley)
;Value: 5
(count-graph-edges C5-cayley)
;Value: 5

;;; Similarly, the cyclic group of order 10.

(define C10-cayley (cyclic-cayley 10 3))

(count-graph-vertices C10-cayley)
;Value: 10
(count-graph-edges C10-cayley)
;Value: 10

;;; Cyclic Cayley graphs are cycle graphs:

(define (follow-first-edge graph nsteps)
  (let loop ((steps nsteps)
	     (pos graph))
    (if (> steps 0)
	(begin
	  (display (vertex-name pos)) (display " ")
	  (loop (- steps 1) (traverse pos '(0)))))))

(follow-first-edge C5-cayley 6)
;0 2 4 1 3 0

(follow-first-edge C10-cayley 11)
;0 3 6 9 2 5 8 1 4 7 0


                    

