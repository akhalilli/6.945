;;;; A demonstration of Cayley groups using the graph library.

;;; The vertices of a Cayley graph are the group elements, and a
;;; directed edge exists between group elements (g, gs), where
;;; s is a generator.

;;; A Cayley graph can be infinite or finite, depending on whether
;;; the underlying group is infinite or finite.

(define-memoized (cayley element generators group-*)
  (let ((vertex (make-vertex (stream) element)))
    (set-vertex-edges!
      vertex
      (make-edges
        (stream-map
          (lambda (s)
            (make-edge vertex
                       (cayley (group-* element s) generators group-*)))
          (list->stream generators))))
    vertex))

;;; Cyclic groups

(define (cyclic-cayley n g)
  (define (cyclic-* a b)
    (modulo (+ a b) n))
  (cayley 0 (cons g '()) cyclic-*))

;;; The cyclic group of order 5, generated by the group
;;; element 2.  (Since 2 and 5 are relatively prime, 2
;;; alone generates the cyclic group of order 5.)

(define C5-cayley (cyclic-cayley 5 2))

(count-graph-vertices C5-cayley)
;Value: 5
(count-graph-edges C5-cayley)
;Value: 5

;;; Similarly, the cyclic group of order 10.

(define C10-cayley (cyclic-cayley 10 3))

(count-graph-vertices C10-cayley)
;Value: 10
(count-graph-edges C10-cayley)
;Value: 10

;;; Cyclic Cayley graphs are cycle graphs:

(define (follow-first-edge graph nsteps)
  (let loop ((steps nsteps)
	     (pos graph))
    (if (> steps 0)
	(begin
	  (display (vertex-name pos)) (display " ")
	  (loop (- steps 1) (traverse pos '(0)))))))

;(follow-first-edge C5-cayley 6)
;0 2 4 1 3 0

;(follow-first-edge C10-cayley 11)
;0 3 6 9 2 5 8 1 4 7 0

;;; Free groups

;;; We represent elements of a free group as strings of
;;; letters.  An uppercase letter represents the inverse
;;; of the lowercase letter.  For example, "Aab" = "b".

(define (free-cayley start generators)
  (define (free-* x y)
    (let ((len-x (string-length x))
          (len-y (string-length y)))
      (cond
       ((or (= len-x 0) (= len-y 0))
	(string-append x y))
       ((and (substring-ci=? x (- len-x 1) len-x y 0 1)
             (not (substring=? x (- len-x 1) len-x y 0 1)))
        (free-* (string-head x (- len-x 1))
                (string-tail y 1)))
       (else (string-append x y)))))
  (cayley start generators free-*))

;;; Free group generated by two elements, a and b, at
;;; the identity.

(define free-ab
  (free-cayley "" '("a" "b")))

;;; The free group is infinite.

;(count-graph-vertices free-ab)
;Aborting!: out of memory

;;; Traversing along a specific path corresponds to a specific
;;; group element.

(traverse free-ab '(0 1 0 1 0 1))
;Value: #[vertex 17 "ababab"]

(traverse free-ab '(0 0 0 0 0 0 0 0 0 0 0))
;Value: #[vertex 18 "aaaaaaaaaaa"]

;;; We can also start at an arbitrary group element.

(define free-ab-2
  (free-cayley "ABaBBBA" '("a" "b")))

(traverse free-ab-2 '(0 1 1 1 0 1))
;Value: #[vertex 19 "ABaab"]

(define free-ab-3
  (free-cayley "ABAB" '("a" "b")))

(traverse free-ab-3 '(1 0 1 0 0 0 0 0 0 0 0 0))
;Value: #[vertex 20 "aaaaaaaa"]

